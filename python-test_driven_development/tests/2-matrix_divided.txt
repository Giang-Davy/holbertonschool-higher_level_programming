>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test 1: matrix= List of Lists of integers / div= integer
>>> matrix_divided([[1, 2], [3, 4]], 2)
[[0.5, 1.0], [1.5, 2.0]]

# Test 2: matrix= List of Lists of integers / div= string
>>> matrix_divided([[1, 2], [3, 4]], "2")
Traceback (most recent call last):
    ...
TypeError: div must be a number

# Test 3: matrix= List of Lists of integers / div= 0
>>> matrix_divided([[1, 2], [3, 4]], 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

# Test 4: matrix= not a list of lists / div= integer
>>> matrix_divided("not a matrix", 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test 5: matrix= list of lists but not rectangular / div= integer
>>> matrix_divided([[1, 2], [3, 4, 5]], 2)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

# Test 6: matrix= list of lists / div= float('inf')
>>> matrix_divided([[1, 2], [3, 4]], float('inf'))
[[0.0, 0.0], [0.0, 0.0]]

# Test 7: matrix= list of lists with float('inf') / div= integer
>>> matrix_divided([[1, float('inf')], [3, 4]], 2)
[[0.5, inf], [1.5, 2.0]]

# Test 8: matrix= list of lists with float('inf') / div= float('inf')
>>> matrix_divided([[1, float('inf')], [3, 4]], float('inf'))
[[0.0, nan], [0.0, 0.0]]

# Test 9: missing one argument
>>> matrix_divided([[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

# Test 10: missing two arguments
>>> matrix_divided()
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
